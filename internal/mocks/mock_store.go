// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	store "github.com/arseniy96/bonus-program/internal/store"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(arg0 context.Context, arg1 int, arg2, arg3 string) (*store.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*store.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), arg0, arg1, arg2, arg3)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), arg0, arg1, arg2)
}

// FindBonusTransactionsByUserID mocks base method.
func (m *MockRepository) FindBonusTransactionsByUserID(arg0 context.Context, arg1 int) ([]store.BonusTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBonusTransactionsByUserID", arg0, arg1)
	ret0, _ := ret[0].([]store.BonusTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBonusTransactionsByUserID indicates an expected call of FindBonusTransactionsByUserID.
func (mr *MockRepositoryMockRecorder) FindBonusTransactionsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBonusTransactionsByUserID", reflect.TypeOf((*MockRepository)(nil).FindBonusTransactionsByUserID), arg0, arg1)
}

// FindOrderByOrderNumber mocks base method.
func (m *MockRepository) FindOrderByOrderNumber(arg0 context.Context, arg1 string) (*store.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderByOrderNumber", arg0, arg1)
	ret0, _ := ret[0].(*store.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderByOrderNumber indicates an expected call of FindOrderByOrderNumber.
func (mr *MockRepositoryMockRecorder) FindOrderByOrderNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderByOrderNumber", reflect.TypeOf((*MockRepository)(nil).FindOrderByOrderNumber), arg0, arg1)
}

// FindOrdersByUserID mocks base method.
func (m *MockRepository) FindOrdersByUserID(arg0 context.Context, arg1 int) ([]store.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserID", arg0, arg1)
	ret0, _ := ret[0].([]store.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserID indicates an expected call of FindOrdersByUserID.
func (mr *MockRepositoryMockRecorder) FindOrdersByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserID", reflect.TypeOf((*MockRepository)(nil).FindOrdersByUserID), arg0, arg1)
}

// FindUserByLogin mocks base method.
func (m *MockRepository) FindUserByLogin(arg0 context.Context, arg1 string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByLogin indicates an expected call of FindUserByLogin.
func (mr *MockRepositoryMockRecorder) FindUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByLogin", reflect.TypeOf((*MockRepository)(nil).FindUserByLogin), arg0, arg1)
}

// FindUserByToken mocks base method.
func (m *MockRepository) FindUserByToken(arg0 context.Context, arg1 string) (*store.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", arg0, arg1)
	ret0, _ := ret[0].(*store.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken.
func (mr *MockRepositoryMockRecorder) FindUserByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockRepository)(nil).FindUserByToken), arg0, arg1)
}

// GetWithdrawalSumByUserID mocks base method.
func (m *MockRepository) GetWithdrawalSumByUserID(arg0 context.Context, arg1 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalSumByUserID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawalSumByUserID indicates an expected call of GetWithdrawalSumByUserID.
func (mr *MockRepositoryMockRecorder) GetWithdrawalSumByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalSumByUserID", reflect.TypeOf((*MockRepository)(nil).GetWithdrawalSumByUserID), arg0, arg1)
}

// SaveWithdrawBonuses mocks base method.
func (m *MockRepository) SaveWithdrawBonuses(arg0 context.Context, arg1 int, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveWithdrawBonuses", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveWithdrawBonuses indicates an expected call of SaveWithdrawBonuses.
func (mr *MockRepositoryMockRecorder) SaveWithdrawBonuses(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveWithdrawBonuses", reflect.TypeOf((*MockRepository)(nil).SaveWithdrawBonuses), arg0, arg1, arg2, arg3)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(arg0 context.Context, arg1 *store.Order, arg2 string, arg3 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), arg0, arg1, arg2, arg3)
}

// UpdateUserToken mocks base method.
func (m *MockRepository) UpdateUserToken(arg0 context.Context, arg1, arg2 string, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserToken", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserToken indicates an expected call of UpdateUserToken.
func (mr *MockRepositoryMockRecorder) UpdateUserToken(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserToken", reflect.TypeOf((*MockRepository)(nil).UpdateUserToken), arg0, arg1, arg2, arg3)
}
